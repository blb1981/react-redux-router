[{"/home/brandon/Projects/react-redux-router/src/index.js":"1","/home/brandon/Projects/react-redux-router/src/reportWebVitals.js":"2","/home/brandon/Projects/react-redux-router/src/playground/redux-notes.js":"3"},{"size":538,"mtime":1607487497391,"results":"4","hashOfConfig":"5"},{"size":362,"mtime":1607149339433,"results":"6","hashOfConfig":"5"},{"size":6254,"mtime":1607497184926,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"18b0snr",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/home/brandon/Projects/react-redux-router/src/index.js",[],["16","17"],"/home/brandon/Projects/react-redux-router/src/reportWebVitals.js",[],"/home/brandon/Projects/react-redux-router/src/playground/redux-notes.js",["18","19","20","21","22","23","24","25"],"import React from 'react'\nimport { createStore, combineReducers } from 'redux'\nimport { v4 as uuidv4 } from 'uuid'\n// combineReducers allows you to use multiple reducers\n// Two reducers will be used, one for notes, another for filters\n\n// =============================================================================\n// Initial state (demo)\n// =============================================================================\n\n// const demoState = {\n// \tnotes: [{\n// \t\tid: 'asdfasdflkj',\n// \t\tnoteTitle: 'First note',\n// \t\tnoteBody: 'This is the body of my first note.',\n// \t\tcreatedAt: 0\n// \t}],\n// \tfilters: {\n// \t\ttext: 'first',\n// \t\tsortBy: 'date',  // date or name\n// \t\tstartDate: undefined,\n// \t\tendDate: undefined\n// \t}\n// }\n\n// =============================================================================\n// Actions generators\n// =============================================================================\n\n// ADD_NOTE\n// REMOVE_NOTE\n// EDIT_NOTE\n\n// SET_TEXT_FILTER\n// SORT_BY_DATE\n// SORT_BY_NAME\n// SET_START_DATE\n// SET_END_DATE\n\n// ADD_NOTE\nconst addNote = ({\n  id = '',\n  noteTitle = '',\n  noteBody = '',\n  createdAt = 0,\n} = {}) => ({\n  type: 'ADD_NOTE',\n  note: {\n    id: uuidv4(),\n    noteTitle,\n    noteBody,\n    createdAt,\n  },\n})\n// REMOVE_NOTE\nconst removeNote = ({ id } = {}) => ({\n  type: 'REMOVE_NOTE',\n  id,\n})\n\n// EDIT_NOTE\nconst editNote = (id, updates) => ({\n  type: 'EDIT_NOTE',\n  id,\n  updates,\n})\n\n// SET_TEXT_FILTER\nconst setTextFilter = (text = '') => {\n  return {\n    type: 'SET_TEXT_FILTER',\n    text,\n  }\n}\n\n// SORT_BY_DATE\nconst sortByDate = () => ({\n  type: 'SORT_BY_DATE',\n})\n\n// SORT_BY_NAME\nconst sortByName = () => ({\n  type: 'SORT_BY_NAME',\n})\n\n// SET_START_DATE\nconst setStartDate = (startDate) => ({\n  type: 'SET_START_DATE',\n  startDate,\n})\n\n// SET_END_DATE\nconst setEndDate = (endDate) => ({\n  type: 'SET_END_DATE',\n  endDate,\n})\n\n// =============================================================================\n// // Reducers\n// =============================================================================\n\n// Notes reducer\n// Define state in an empty variable\nconst notesReducerDefaultState = []\nconst notesReducer = (state = notesReducerDefaultState, action) => {\n  switch (action.type) {\n    case 'ADD_NOTE':\n      return [...state, action.note]\n    case 'REMOVE_NOTE':\n      return state.filter(({ id }) => id !== action.id)\n    case 'EDIT_NOTE':\n      return state.map((note) => {\n        if (action.id === note.id) {\n          return {\n            ...note,\n            ...action.updates,\n          }\n        } else {\n          return note\n        }\n      })\n    default:\n      return state\n  }\n}\n\n// Filters reducer\n// Default state defined in variable\nconst filtersReducerDefaultState = {\n  text: '',\n  sortBy: 'date', // date or name\n  startDate: undefined,\n  endDate: undefined,\n}\nconst filtersReducer = (state = filtersReducerDefaultState, action) => {\n  switch (action.type) {\n    case 'SET_TEXT_FILTER':\n      return {\n        ...state,\n        text: action.text,\n      }\n    case 'SORT_BY_NAME':\n      return {\n        ...state,\n        sortBy: 'name',\n      }\n    case 'SORT_BY_DATE':\n      return {\n        ...state,\n        sortBy: 'date',\n      }\n    case 'SET_START_DATE':\n      return {\n        ...state,\n        startDate: action.startDate,\n      }\n    case 'SET_END_DATE':\n      return {\n        ...state,\n        endDate: action.endDate,\n      }\n    default:\n      return state\n  }\n}\n\n// =============================================================================\n// Filtering\n// =============================================================================\n\nconst getVisibleNotes = (notes, { text, sortBy, startDate, endDate }) => {\n  return notes\n    .filter((note) => {\n      const startDateMatch =\n        typeof startDate !== 'number' || note.createdAt >= startDate\n      const endDateMatch =\n        typeof endDate !== 'number' || note.createdAt <= endDate\n      const textMatch =\n        note.noteTitle.toLocaleLowerCase().includes(text.toLocaleLowerCase()) ||\n        note.noteBody.toLocaleLowerCase().includes(text.toLocaleLowerCase())\n\n      return textMatch && startDateMatch && endDateMatch\n    })\n    .sort((a, b) => {\n      if (sortBy === 'date') {\n        return a.createdAt > b.createdAt ? 1 : -1\n      } else if (sortBy === 'name') {\n        return a.noteTitle[0] > b.noteTitle[0] ? 1 : -1\n      }\n    })\n}\n\n// =============================================================================\n// Store creation\n// =============================================================================\n\nconst store = createStore(\n  combineReducers({\n    notes: notesReducer,\n    filters: filtersReducer,\n  })\n)\n\n// =============================================================================\n// Subscribe to see state change\n// =============================================================================\n\nstore.subscribe(() => {\n  const state = store.getState()\n  const visibleNotes = getVisibleNotes(state.notes, state.filters)\n  console.log(visibleNotes)\n})\n\n// =============================================================================\n// Sample actions\n// =============================================================================\n\nconst noteOne = store.dispatch(\n  addNote({\n    noteTitle: 'First note',\n    noteBody: 'This is the body of my first note.',\n    createdAt: 1000,\n  })\n)\n\nconst noteTwo = store.dispatch(\n  addNote({\n    noteTitle: 'A 2nd Note',\n    noteBody: 'Something cool for my 2nd note.',\n    createdAt: 1100,\n  })\n)\n\n// store.dispatch(removeNote({ id: noteTwo.note.id }))\n\n// store.dispatch(editNote(noteOne.note.id, { noteBody: 'Shorter note now.' }))\n\n// store.dispatch(setTextFilter('first'))\n// store.dispatch(setTextFilter())\n// store.dispatch(setTextFilter('2'))\n\nstore.dispatch(sortByName())\nstore.dispatch(sortByDate())\n\n// store.dispatch(setStartDate(1))\n// store.dispatch(setStartDate())\n// store.dispatch(setEndDate(-2000))\n// store.dispatch(setEndDate())\n\n// =============================================================================\n// React code, only exists to keep index.js happy\n// =============================================================================\n\nconst App = () => {\n  return <div>hi</div>\n}\n\nexport default App\n",{"ruleId":"26","replacedBy":"27"},{"ruleId":"28","replacedBy":"29"},{"ruleId":"30","severity":1,"message":"31","line":56,"column":7,"nodeType":"32","messageId":"33","endLine":56,"endColumn":17},{"ruleId":"30","severity":1,"message":"34","line":62,"column":7,"nodeType":"32","messageId":"33","endLine":62,"endColumn":15},{"ruleId":"30","severity":1,"message":"35","line":69,"column":7,"nodeType":"32","messageId":"33","endLine":69,"endColumn":20},{"ruleId":"30","severity":1,"message":"36","line":87,"column":7,"nodeType":"32","messageId":"33","endLine":87,"endColumn":19},{"ruleId":"30","severity":1,"message":"37","line":93,"column":7,"nodeType":"32","messageId":"33","endLine":93,"endColumn":17},{"ruleId":"38","severity":1,"message":"39","line":184,"column":18,"nodeType":"40","messageId":"41","endLine":184,"endColumn":20},{"ruleId":"30","severity":1,"message":"42","line":218,"column":7,"nodeType":"32","messageId":"33","endLine":218,"endColumn":14},{"ruleId":"30","severity":1,"message":"43","line":226,"column":7,"nodeType":"32","messageId":"33","endLine":226,"endColumn":14},"no-native-reassign",["44"],"no-negated-in-lhs",["45"],"no-unused-vars","'removeNote' is assigned a value but never used.","Identifier","unusedVar","'editNote' is assigned a value but never used.","'setTextFilter' is assigned a value but never used.","'setStartDate' is assigned a value but never used.","'setEndDate' is assigned a value but never used.","array-callback-return","Array.prototype.sort() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'noteOne' is assigned a value but never used.","'noteTwo' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]